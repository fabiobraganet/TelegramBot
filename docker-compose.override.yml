version: '3.4'

services:
  telegrambot:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:8443
    ports:
      - "8443:8443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
    networks:
      - frontend
      - backend
    depends_on: 
      - redis
      - rabbitmq

  esbworkersbots:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
    networks:
      - backend
    depends_on: 
      - rabbitmq
      - esbservicesmessaging

  esbservicesmessaging:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "80"
      - "443"
    networks:
      - backend
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on: 
      - mssql

  redis:
    command: redis-server --requirepass !Redis2020
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis-data:/data

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "!RabbitMQ2020"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend

  mssql:
    environment:
        - ACCEPT_EULA=Y
        - SA_PASSWORD=!MSSql2020
    ports:
        - '1433:1433'
    networks:
      - backend
    volumes:
        - './Docker/Volume/MSSQL:/var/opt/mssql'

volumes:
  redis-data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
